// Ones and Zeros of ASCII characters for 8x8 LED Matrix
// Thanks to https://xantorohara.github.io/led-matrix-editor/
const byte ASCII[][8] = {
  {
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  }, {
    B00000000,
    B00011000,
    B00111100,
    B00111100,
    B00011000,
    B00011000,
    B00000000,
    B00011000
  }, {
    B00000000,
    B00110110,
    B00110110,
    B00010100,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  }, {
    B00000000,
    B00110110,
    B00110110,
    B01111111,
    B00110110,
    B01111111,
    B00110110,
    B00110110
  }, {
    B00000000,
    B00001000,
    B00011110,
    B00100000,
    B00011100,
    B00000010,
    B00111100,
    B00001000
  }, {
    B00000000,
    B01100000,
    B01100110,
    B00001100,
    B00011000,
    B00110000,
    B01100110,
    B00000110
  }, {
    B00000000,
    B00111100,
    B01100110,
    B00111100,
    B00101000,
    B01100101,
    B01100110,
    B00111111
  }, {
    B00000000,
    B00001100,
    B00001100,
    B00000110,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  }, {
    B00000000,
    B00000110,
    B00001100,
    B00011000,
    B00011000,
    B00011000,
    B00001100,
    B00000110
  }, {
    B00000000,
    B01100000,
    B00110000,
    B00011000,
    B00011000,
    B00011000,
    B00110000,
    B01100000
  }, {
    B00000000,
    B00000000,
    B00110110,
    B00011100,
    B01111111,
    B00011100,
    B00110110,
    B00000000
  }, {
    B00000000,
    B00000000,
    B00001000,
    B00001000,
    B00111110,
    B00001000,
    B00001000,
    B00000000
  }, {
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00110000,
    B00110000,
    B00110000,
    B01100000


  }, {
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00111100,
    B00000000,
    B00000000,
    B00000000
  }, {
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B01100000,
    B01100000
  }, {
    B00000000,
    B00000000,
    B00000110,
    B00001100,
    B00011000,
    B00110000,
    B01100000,
    B00000000
  }, {
    B00000000,
    B00111100,
    B01100110,
    B01101110,
    B01110110,
    B01100110,
    B01100110,
    B00111100
  }, {
    B00000000,
    B00011000,
    B00011000,
    B00111000,
    B00011000,
    B00011000,
    B00011000,
    B01111110
  }, {
    B00000000,
    B00111100,
    B01100110,
    B00000110,
    B00001100,
    B00110000,
    B01100000,
    B01111110
  }, {
    B00000000,
    B00111100,
    B01100110,
    B00000110,
    B00011100,
    B00000110,
    B01100110,
    B00111100
  }, {
    B00000000,
    B00001100,
    B00011100,
    B00101100,
    B01001100,
    B01111110,
    B00001100,
    B00001100
  }, {
    B00000000,
    B01111110,
    B01100000,
    B01111100,
    B00000110,
    B00000110,
    B01100110,
    B00111100
  }, {
    B00000000,
    B00111100,
    B01100110,
    B01100000,
    B01111100,
    B01100110,
    B01100110,
    B00111100
  }, {
    B00000000,
    B01111110,
    B01100110,
    B00001100,
    B00001100,
    B00011000,
    B00011000,
    B00011000
  }, {
    B00000000,
    B00111100,
    B01100110,
    B01100110,
    B00111100,
    B01100110,
    B01100110,
    B00111100
  }, {
    B00000000,
    B00111100,
    B01100110,
    B01100110,
    B00111110,
    B00000110,
    B01100110,
    B00111100
  }, {
    B00000000,
    B00000000,
    B00011000,
    B00011000,
    B00000000,
    B00011000,
    B00011000,
    B00000000
  }, {
    B00000000,
    B00000000,
    B00011000,
    B00011000,
    B00000000,
    B00011000,
    B00011000,
    B00110000
  }, {
    B00000000,
    B00000110,
    B00001100,
    B00011000,
    B00110000,
    B00011000,
    B00001100,
    B00000110
  }, {
    B00000000,
    B00000000,
    B00000000,
    B00111100,
    B00000000,
    B00111100,
    B00000000,
    B00000000
  }, {
    B00000000,
    B01100000,
    B00110000,
    B00011000,
    B00001100,
    B00011000,
    B00110000,
    B01100000
  }, {
    B00000000,
    B00111100,
    B01100110,
    B00000110,
    B00011100,
    B00011000,
    B00000000,
    B00011000
  }, {
    B00000000,
    B00111000,
    B01000100,
    B01011100,
    B01011000,
    B01000010,
    B00111100,
    B00000000
  }, {
    B00000000,
    B00111100,
    B01100110,
    B01100110,
    B01111110,
    B01100110,
    B01100110,
    B01100110
  }, {
    B00000000,
    B01111100,
    B01100110,
    B01100110,
    B01111100,
    B01100110,
    B01100110,
    B01111100
  }, {
    B00000000,
    B00111100,
    B01100110,
    B01100000,
    B01100000,
    B01100000,
    B01100110,
    B00111100
  }, {
    B00000000,
    B01111100,
    B01100110,
    B01100110,
    B01100110,
    B01100110,
    B01100110,
    B01111100
  }, {
    B00000000,
    B01111110,
    B01100000,
    B01100000,
    B01111100,
    B01100000,
    B01100000,
    B01111110
  }, {
    B00000000,
    B01111110,
    B01100000,
    B01100000,
    B01111100,
    B01100000,
    B01100000,
    B01100000
  }, {
    B00000000,
    B00111100,
    B01100110,
    B01100000,
    B01100000,
    B01101110,
    B01100110,
    B00111100
  }, {
    B00000000,
    B01100110,
    B01100110,
    B01100110,
    B01111110,
    B01100110,
    B01100110,
    B01100110
  }, {
    B00000000,
    B00111100,
    B00011000,
    B00011000,
    B00011000,
    B00011000,
    B00011000,
    B00111100
  }, {
    B00000000,
    B00011110,
    B00001100,
    B00001100,
    B00001100,
    B01101100,
    B01101100,
    B00111000
  }, {
    B00000000,
    B01100110,
    B01101100,
    B01111000,
    B01110000,
    B01111000,
    B01101100,
    B01100110
  }, {
    B00000000,
    B01100000,
    B01100000,
    B01100000,
    B01100000,
    B01100000,
    B01100000,
    B01111110
  }, {
    B00000000,
    B01100011,
    B01110111,
    B01111111,
    B01101011,
    B01100011,
    B01100011,
    B01100011
  }, {
    B00000000,
    B01100011,
    B01110011,
    B01111011,
    B01101111,
    B01100111,
    B01100011,
    B01100011
  }, {
    B00000000,
    B00111100,
    B01100110,
    B01100110,
    B01100110,
    B01100110,
    B01100110,
    B00111100
  }, {
    B00000000,
    B01111100,
    B01100110,
    B01100110,
    B01100110,
    B01111100,
    B01100000,
    B01100000
  }, {
    B00000000,
    B00111100,
    B01100110,
    B01100110,
    B01100110,
    B01101110,
    B00111100,
    B00000110
  }, {
    B00000000,
    B01111100,
    B01100110,
    B01100110,
    B01111100,
    B01111000,
    B01101100,
    B01100110
  }, {
    B00000000,
    B00111100,
    B01100110,
    B01100000,
    B00111100,
    B00000110,
    B01100110,
    B00111100
  }, {
    B00000000,
    B01111110,
    B01011010,
    B00011000,
    B00011000,
    B00011000,
    B00011000,
    B00011000
  }, {
    B00000000,
    B01100110,
    B01100110,
    B01100110,
    B01100110,
    B01100110,
    B01100110,
    B00111110
  }, {
    B00000000,
    B01100110,
    B01100110,
    B01100110,
    B01100110,
    B01100110,
    B00111100,
    B00011000
  }, {
    B00000000,
    B01100011,
    B01100011,
    B01100011,
    B01101011,
    B01111111,
    B01110111,
    B01100011
  }, {
    B00000000,
    B01100011,
    B01100011,
    B00110110,
    B00011100,
    B00110110,
    B01100011,
    B01100011
  }, {
    B00000000,
    B01100110,
    B01100110,
    B01100110,
    B00111100,
    B00011000,
    B00011000,
    B00011000
  }, {
    B00000000,
    B01111110,
    B00000110,
    B00001100,
    B00011000,
    B00110000,
    B01100000,
    B01111110
  }, {
    B00000000,
    B00011110,
    B00011000,
    B00011000,
    B00011000,
    B00011000,
    B00011000,
    B00011110
  }, {
    B00000000,
    B00000000,
    B01100000,
    B00110000,
    B00011000,
    B00001100,
    B00000110,
    B00000000
  }, {
    B00000000,
    B01111000,
    B00011000,
    B00011000,
    B00011000,
    B00011000,
    B00011000,
    B01111000
  }, {
    B00000000,
    B00001000,
    B00010100,
    B00100010,
    B01000001,
    B00000000,
    B00000000,
    B00000000
  }, {
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B01111111
  }, {
    B00000000,
    B00001100,
    B00001100,
    B00000110,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  }, {
    B00000000,
    B00000000,
    B00000000,
    B00111100,
    B00000110,
    B00111110,
    B01100110,
    B00111110
  }, {
    B00000000,
    B01100000,
    B01100000,
    B01100000,
    B01111100,
    B01100110,
    B01100110,
    B01111100
  }, {
    B00000000,
    B00000000,
    B00000000,
    B00111100,
    B01100110,
    B01100000,
    B01100110,
    B00111100
  }, {
    B00000000,
    B00000110,
    B00000110,
    B00000110,
    B00111110,
    B01100110,
    B01100110,
    B00111110
  }, {
    B00000000,
    B00000000,
    B00000000,
    B00111100,
    B01100110,
    B01111110,
    B01100000,
    B00111100
  }, {
    B00000000,
    B00011100,
    B00110110,
    B00110000,
    B00110000,
    B01111100,
    B00110000,
    B00110000
  }, {
    B00000000,
    B00000000,
    B00111110,
    B01100110,
    B01100110,
    B00111110,
    B00000110,
    B00111100
  }, {
    B00000000,
    B01100000,
    B01100000,
    B01100000,
    B01111100,
    B01100110,
    B01100110,
    B01100110
  }, {
    B00000000,
    B00000000,
    B00011000,
    B00000000,
    B00011000,
    B00011000,
    B00011000,
    B00111100
  }, {
    B00000000,
    B00001100,
    B00000000,
    B00001100,
    B00001100,
    B01101100,
    B01101100,
    B00111000
  }, {
    B00000000,
    B01100000,
    B01100000,
    B01100110,
    B01101100,
    B01111000,
    B01101100,
    B01100110
  }, {
    B00000000,
    B00011000,
    B00011000,
    B00011000,
    B00011000,
    B00011000,
    B00011000,
    B00011000
  }, {
    B00000000,
    B00000000,
    B00000000,
    B01100011,
    B01110111,
    B01111111,
    B01101011,
    B01101011
  }, {
    B00000000,
    B00000000,
    B00000000,
    B01111100,
    B01111110,
    B01100110,
    B01100110,
    B01100110
  }, {
    B00000000,
    B00000000,
    B00000000,
    B00111100,
    B01100110,
    B01100110,
    B01100110,
    B00111100
  }, {
    B00000000,
    B00000000,
    B01111100,
    B01100110,
    B01100110,
    B01111100,
    B01100000,
    B01100000
  }, {
    B00000000,
    B00000000,
    B00111100,
    B01101100,
    B01101100,
    B00111100,
    B00001101,
    B00001111
  }, {
    B00000000,
    B00000000,
    B00000000,
    B01111100,
    B01100110,
    B01100110,
    B01100000,
    B01100000
  }, {
    B00000000,
    B00000000,
    B00000000,
    B00111110,
    B01000000,
    B00111100,
    B00000010,
    B01111100
  }, {
    B00000000,
    B00000000,
    B00011000,
    B00011000,
    B01111110,
    B00011000,
    B00011000,
    B00011000
  }, {
    B00000000,
    B00000000,
    B00000000,
    B01100110,
    B01100110,
    B01100110,
    B01100110,
    B00111110
  }, {
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B01100110,
    B01100110,
    B00111100,
    B00011000
  }, {
    B00000000,
    B00000000,
    B00000000,
    B01100011,
    B01101011,
    B01101011,
    B01101011,
    B00111110
  }, {
    B00000000,
    B00000000,
    B00000000,
    B01100110,
    B00111100,
    B00011000,
    B00111100,
    B01100110
  }, {
    B00000000,
    B00000000,
    B00000000,
    B01100110,
    B01100110,
    B00111110,
    B00000110,
    B00111100
  }, {
    B00000000,
    B00000000,
    B00000000,
    B00111100,
    B00001100,
    B00011000,
    B00110000,
    B00111100
  }
};
const int ASCII_Length = sizeof(ASCII) / 8;
// BitBanging code started from https://github.com/wemos/WEMOS_Matrix_LED_Shield_Arduino_Library
uint8_t ImageBuffer[8];
uint8_t CurrentFrame[8];
uint8_t NextFrame[8];

void UpdateDisplay(void)
{
  // Write to LED Matrix row by row
  for (uint8_t Row = 0; Row < 8; Row++)
  {
    BitBang(0x44);
    BitBang(0xC0 | Row);
    BitBang(ImageBuffer[Row]);
  }
  // LED intensity
  BitBang(0x88 | 0x00);
}

void BitBang(byte data)
{
  digitalWrite(SDA, LOW);
  for (uint8_t Bit = 0; Bit < 8; Bit++) {
    digitalWrite(SCL, LOW);
    digitalWrite(SDA, data & 1 ? HIGH : LOW);
    data >>= 1;
    digitalWrite(SCL, HIGH);
  }
  digitalWrite(SDA, HIGH);
}

void setup() {
  pinMode(SDA, OUTPUT);
  pinMode(SCL, OUTPUT);
}

void ImageFrame(const byte* ThisImage, byte* ThisFrame) {
  // Put Image in Frame
  for (uint8_t Row = 0; Row < 8; Row++) for (uint8_t Col = 0; Col < 8; Col++) if (bitRead(ThisImage[Row], 7 - Col)) ThisFrame[Row] |= (1 << 7 - Col);
}

void loop() {
  char  Text[] = " Majed Abouhatab, P.E. ";
  // Process text letter by letter
  for (uint8_t Letter = 0; Letter < sizeof(Text) - 1 ; Letter++) {
    // Clear frames
    for (uint8_t Row = 0; Row < 8; Row++) {
      CurrentFrame[Row] = 0x00;
      NextFrame[Row] = 0x00;
    }
    // Letter to move out
    if (Text[Letter] > 32 && Text[Letter] < 123) ImageFrame(ASCII[Text[Letter] - 32], CurrentFrame);
    // Letter to move in
    if (Text[Letter + 1] > 32 && Text[Letter + 1] < 123) ImageFrame(ASCII[Text[Letter + 1] - 32], NextFrame);
    // Clear image buffer
    for (uint8_t Row = 0; Row < 8; Row++) ImageBuffer[Row] = 0x00;
    // Constructing image
    for (uint8_t Col = 0; Col < 8; Col++) {
      for (uint8_t Row = 0; Row < 8; Row++) {
        // Merge scrolling frames into image
        ImageBuffer[Row] = (CurrentFrame[Row] << Col) | (NextFrame[Row] >> (8 - Col));
      }
      // Display buffer contents
      UpdateDisplay();
      // Scroll speed
      delay(80);
    }
  }
}
